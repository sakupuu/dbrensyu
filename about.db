データベースに格納されている情報は、外部からのアクセスのよって検索したり書き換えたりすることが可能だが、そのためには専用の操作言語**SQL**を利用することが一般的。

狭い意味でデータベースという場合、検索や書き換え、分析などのデータ管理を目的として様々な情報を蓄積したものを指す。

データベースはいくつかの種類に分けられる。

現在、分野を問わず広く用いられているのが、複数の表の形式でデータを管理する**リレーショナルデータベース（RDB）**である。

？？データベースは結局はファイル。ファイルにSQLを送りつけて、なぜデータが書き変わるのか。。？

！！実は私たちがSQLを送るのはデータベースファイルではなく、データベース管理システム（DBMS）というプログラムなのだ。

SQLの特徴として、「命令の数は少なくてシンプルだが、複雑に就職できる」という点が挙げられる。

・４大命令・
SELECT(検索), UPDATE（書き換え）, DELETE（削除）, INSERT（追加）

NULLは＝で判定できない。
IS NULL や IS NOT NULLを使って条件式を作る。

文字列があるパターンに合致しているかをテェックすることをパターンマッチングという。
SQLではパターンマッチングにLIKE演算子を使う。

BETWEEN演算子は、ある範囲内に値が収まっているかを判定する。

<>という演算子は左右の値が等しくない場合に用いる。

SQLドリル問題３−１
1. SELECT * 
   FROM 気象観測
   WHERE 月 = 6
2. SELECT * 
   FROM 気象観測
   WHERE 月 <> 6
3. SELECT *
   FROM 気象観測
   WHERE 降水量 < 100
4. SELECT *
   FROM 気象観測
   WHERE 降水量 > 200
5. SELECT *
   FROM 気象観測
   WHERE 最高気温 >= 30
6. SELECT *
   FROM 気象観測
   WHERE 最低気温 <= 0
7. SELECT *
   FROM 気象観測
   WHERE 月 IN(3,5,7)
8. SELECT *
   FROM 気象観測
   WHERE 月 NOT IN(3,5,7)
9. SELECT *
   FROM 気象観測
   WHERE 降水量 <= 100 AND 湿度 < 50
10. SELECT *
    FROM 気象観測
    WHERE 最低気温 < 5 OR 最高気温 > 35
11. SELECT *
    FROM 気象観測
    WHERE 湿度 BETWEEN 60 AND 79
12. SELECT *
    FROM 気象観測
    WHERE 降水量 IS NULL OR 最高気温 IS NULL OR 最低気温 IS NULL OR 湿度 IS NULL


問題3-2
1. SELECT 都道府県名
     FROM 都道府県
    WHERE 都道府県名 LIKE '%川'
2. SELECT 都道府県名
     FROM 都道府県
    WHERE 都道府県名 LIKE '%島%'
3. SELECT 都道府県名
     FROM 都道府県
    WHERE 都道府県名 LIKE '愛%'
4. SELECT *
     FROM 都道府県
    WHERE 都道府県名 = 県庁所在地
5. SELECT *
     FROM 都道府県
    WHERE 都道府県名 <> 県庁所在地

問題3-3
1. SELECT *
   FROM 成績表
2. /* S001 */
   INSERT INTO 成績表
   VALUES ('S001', '織田 信長', '77', '55', '80', '75', '93', NULL);

   /* S002 */
   INSERT INTO 成績表
   VALUES ('S002', '豊臣 秀吉', '64', '69', '70', '0', '59', NULL);

   /* S003 */
   INSERT INTO 成績表
   VALUES ('S003', '徳川 家康', '80', '83', '85', '90', '79', NULL);
3. UPDATE 成績表
   SET 法学 = 85, 哲学 = 67
   WHERE 学籍番号 = 'S001'
4. UPDATE 成績表
   SET 外国語 = 81
   WHERE 学籍番号 IN('A002', 'E003')
5. (1)
   UPDATE 成績表
   SET 総合成績 = 'A'
   WHERE 法学 >= 80 AND 経済学 >= 80 AND 哲学 >= 80 AND 情報理論 >= 80 AND 外国語 >= 80
   (2)
   UPDATE 成績表
   SET 総合成績 = 'B'
   SET (法学 >= 80 OR 外国語 >= 80) AND (経済学 >= 80 OR 哲学 >= 80)
   AND 総合成績 IS NULL
   (3)
   UPDATE 成績表
   SET 総合成績 = 'D'
   WHERE 法学 < 50 AND 経済学 < 50 AND 哲学 < 50 AND 情報理論 < 50 AND 外国語 < 50
   AND 総合成績 IS NULL
   (4)
   UPDATE 成績表
   SET 総合成績 = 'C'
   WHERE 総合成績 IS NULL

問題3-4
1. 月
2. コード
3. 学籍番号

問題４−１
1. SELECT * FROM 注文履歴
   ORDER BY 注文番号,注文枝番 
2. SELECT DISTINCT 商品名 FROM 注文履歴
   WHERE 日付 >= '2018,01,01' AND 日付 <= '2018,01,31'
   ORDER BY 商品名
3. SELECT 注文番号, 注文枝番, 注文金額 FROM 注文履歴
   WHERE 分類 = '1'
   ORDER BY 注文金額 
   OFFSET 1 ROWS 
   FETCH NEXT 3 ROWS ONLY
4. SELECT 日付,商品名,単価,数量,注文金額 FROM 注文履歴
   WHERE 分類 = '3'
   ORDER BY 日付 AND 数量 >= 2 ORDER BY 日付, 数量 DESC
5. SELECT DISTINCT 分類, 商品名,サイズ,単価 FROM 注文履歴
   WHERE 分類 = '1' UNION
   SELECT DISTINCT 分類, 商品名,NULL,単価 FROM 注文履歴
   WHERE 分類 = '2' UNION
   SELECT DISTINCT 分類, 商品名,NULL,単価 FROM 注文履歴
   WHERE 分類 = '3' 
   ORDER BY 1,2

問題４−２
1. SELECT 値 FROM 奇数 
   UNION
   SELECT 値 FROM 偶数
2. SELECT 値 FROM 整数 
   UNION
   SELECT 値 FROM 偶数
3. SELECT 値 FROM 整数 
   UNION
   INTERSECT SELECT 値 FROM 偶数
4. SELECT 値 FROM 奇数 
   UNION
   INTERSECT SELECT 値 FROM 偶数

問題５−１
1. UPDATE 試験結果
      SET 午後１ = (80*4) - (86+68+91)
    WHERE 受験ID = 'SW1046'
   UPDATE 試験結果
      SET 論述 = (68*4) - (65+53+70)
    WHERE 受験ID = 'SW1350'
    UPDATE 試験結果
      SET 午前 = (56*4) - (59+56+36)
    WHERE 受験ID = 'SW1877'
2. SELECT 受験者ID AS 合格者ID FROM 試験結果
    WHERE (午前 >= 60) AND ((午後１ + 午後２) >= 120) AND (0.3 * (午前+午後１+午後２+論述) <= 論述)

問題５−２
1. UPDATE 回答者
   SET 国名 CASE SUBSTRING(TRIM(メールアドレス),
                            LENGTH(TRIM(メールアドレス))-1,2)
            WHEN 'jp' THEN '日本'
            WHEN 'uk' THEN 'イギリス'
            WHEN 'cn' THEN '中国'
            WHEN 'fr' THEN 'フランス'
            WHEN 'vn' THEN 'ベトナム'
2. SELECT TRIM(メールアドレス) AS メールアドレス,
     CASE WHEN 年齢 >= 20 AND 年齢 < 30 THEN '20代'
          WHEN 年齢 >= 30 AND 年齢 < 40 THEN '30代'
          WHEN 年齢 >= 40 AND 年齢 < 50 THEN '40代'
          WHEN 年齢 >= 50 AND 年齢 < 60 THEN '50代'
     END
     || ':' ||
     CASE 性別 WHEN 'M' THEN '男'
     CASE 性別 WHEN 'F' THEN '女'
     END AS 属性
   FROM 回答者

   
   
