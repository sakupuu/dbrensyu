データベースに格納されている情報は、外部からのアクセスのよって検索したり書き換えたりすることが可能だが、そのためには専用の操作言語**SQL**を利用することが一般的。

狭い意味でデータベースという場合、検索や書き換え、分析などのデータ管理を目的として様々な情報を蓄積したものを指す。

データベースはいくつかの種類に分けられる。

現在、分野を問わず広く用いられているのが、複数の表の形式でデータを管理する**リレーショナルデータベース（RDB）**である。

？？データベースは結局はファイル。ファイルにSQLを送りつけて、なぜデータが書き変わるのか。。？

！！実は私たちがSQLを送るのはデータベースファイルではなく、データベース管理システム（DBMS）というプログラムなのだ。

SQLの特徴として、「命令の数は少なくてシンプルだが、複雑に就職できる」という点が挙げられる。

・４大命令・
SELECT(検索), UPDATE（書き換え）, DELETE（削除）, INSERT（追加）

NULLは＝で判定できない。
IS NULL や IS NOT NULLを使って条件式を作る。

文字列があるパターンに合致しているかをテェックすることをパターンマッチングという。
SQLではパターンマッチングにLIKE演算子を使う。

BETWEEN演算子は、ある範囲内に値が収まっているかを判定する。

<>という演算子は左右の値が等しくない場合に用いる。

他のSQL文の一部として登場するSELECT文のことを、副問合せや副紹介、またはサブクエリという。()で括って記述する。
副問合せを使うことにより、複雑で高度なSQL文を書くことが可能になる。
しかし、落ち着いてひとつひとつ見てみれば、単純なSQL文に過ぎない。個々のSQL文を一つずつ作り、後から組み立ててあげれば良い。

複数の値との比較を行いたい時は、等号や不等号にANY/ALL演算子を組み合わせることで行うことができる。
・NOT IN、<>ALLは全ての値と一致しないことを判定する演算子。副問合せの結果にNULLが含まれると、全体の結果もNULLとなる。
 -→副問合せの結果から確実にNULLを削除する必要がある。
 ①副問合せの絞り込み条件に、IS NOT NULLを含める。
 ②COALESCE関数を使ってNULLを別の値に置き換える。
・IN、=ANYはいずれかの値と一致することを判定する演算子。




SQLドリル問題３−１
1. SELECT * 
   FROM 気象観測
   WHERE 月 = 6
2. SELECT * 
   FROM 気象観測
   WHERE 月 <> 6
3. SELECT *
   FROM 気象観測
   WHERE 降水量 < 100
4. SELECT *
   FROM 気象観測
   WHERE 降水量 > 200
5. SELECT *
   FROM 気象観測
   WHERE 最高気温 >= 30
6. SELECT *
   FROM 気象観測
   WHERE 最低気温 <= 0
7. SELECT *
   FROM 気象観測
   WHERE 月 IN(3,5,7)
8. SELECT *
   FROM 気象観測
   WHERE 月 NOT IN(3,5,7)
9. SELECT *
   FROM 気象観測
   WHERE 降水量 <= 100 AND 湿度 < 50
10. SELECT *
    FROM 気象観測
    WHERE 最低気温 < 5 OR 最高気温 > 35
11. SELECT *
    FROM 気象観測
    WHERE 湿度 BETWEEN 60 AND 79
12. SELECT *
    FROM 気象観測
    WHERE 降水量 IS NULL OR 最高気温 IS NULL OR 最低気温 IS NULL OR 湿度 IS NULL


問題3-2
1. SELECT 都道府県名
     FROM 都道府県
    WHERE 都道府県名 LIKE '%川'
2. SELECT 都道府県名
     FROM 都道府県
    WHERE 都道府県名 LIKE '%島%'
3. SELECT 都道府県名
     FROM 都道府県
    WHERE 都道府県名 LIKE '愛%'
4. SELECT *
     FROM 都道府県
    WHERE 都道府県名 = 県庁所在地
5. SELECT *
     FROM 都道府県
    WHERE 都道府県名 <> 県庁所在地

問題3-3
1. SELECT *
   FROM 成績表
2. /* S001 */
   INSERT INTO 成績表
   VALUES ('S001', '織田 信長', '77', '55', '80', '75', '93', NULL);

   /* S002 */
   INSERT INTO 成績表
   VALUES ('S002', '豊臣 秀吉', '64', '69', '70', '0', '59', NULL);

   /* S003 */
   INSERT INTO 成績表
   VALUES ('S003', '徳川 家康', '80', '83', '85', '90', '79', NULL);
3. UPDATE 成績表
   SET 法学 = 85, 哲学 = 67
   WHERE 学籍番号 = 'S001'
4. UPDATE 成績表
   SET 外国語 = 81
   WHERE 学籍番号 IN('A002', 'E003')
5. (1)
   UPDATE 成績表
   SET 総合成績 = 'A'
   WHERE 法学 >= 80 AND 経済学 >= 80 AND 哲学 >= 80 AND 情報理論 >= 80 AND 外国語 >= 80
   (2)
   UPDATE 成績表
   SET 総合成績 = 'B'
   SET (法学 >= 80 OR 外国語 >= 80) AND (経済学 >= 80 OR 哲学 >= 80)
   AND 総合成績 IS NULL
   (3)
   UPDATE 成績表
   SET 総合成績 = 'D'
   WHERE 法学 < 50 AND 経済学 < 50 AND 哲学 < 50 AND 情報理論 < 50 AND 外国語 < 50
   AND 総合成績 IS NULL
   (4)
   UPDATE 成績表
   SET 総合成績 = 'C'
   WHERE 総合成績 IS NULL

問題3-4
1. 月
2. コード
3. 学籍番号

問題４−１
1. SELECT * FROM 注文履歴
   ORDER BY 注文番号,注文枝番 
2. SELECT DISTINCT 商品名 FROM 注文履歴
   WHERE 日付 >= '2018,01,01' AND 日付 <= '2018,01,31'
   ORDER BY 商品名
3. SELECT 注文番号, 注文枝番, 注文金額 FROM 注文履歴
   WHERE 分類 = '1'
   ORDER BY 注文金額 
   OFFSET 1 ROWS 
   FETCH NEXT 3 ROWS ONLY
4. SELECT 日付,商品名,単価,数量,注文金額 FROM 注文履歴
   WHERE 分類 = '3'
   ORDER BY 日付 AND 数量 >= 2 ORDER BY 日付, 数量 DESC
5. SELECT DISTINCT 分類, 商品名,サイズ,単価 FROM 注文履歴
   WHERE 分類 = '1' UNION
   SELECT DISTINCT 分類, 商品名,NULL,単価 FROM 注文履歴
   WHERE 分類 = '2' UNION
   SELECT DISTINCT 分類, 商品名,NULL,単価 FROM 注文履歴
   WHERE 分類 = '3' 
   ORDER BY 1,2

問題４−２
1. SELECT 値 FROM 奇数 
   UNION
   SELECT 値 FROM 偶数
2. SELECT 値 FROM 整数 
   UNION
   SELECT 値 FROM 偶数
3. SELECT 値 FROM 整数 
   UNION
   INTERSECT SELECT 値 FROM 偶数
4. SELECT 値 FROM 奇数 
   UNION
   INTERSECT SELECT 値 FROM 偶数

問題５−１
1. UPDATE 試験結果
      SET 午後１ = (80*4) - (86+68+91)
    WHERE 受験ID = 'SW1046'
   UPDATE 試験結果
      SET 論述 = (68*4) - (65+53+70)
    WHERE 受験ID = 'SW1350'
    UPDATE 試験結果
      SET 午前 = (56*4) - (59+56+36)
    WHERE 受験ID = 'SW1877'
2. SELECT 受験者ID AS 合格者ID FROM 試験結果
    WHERE (午前 >= 60) AND ((午後１ + 午後２) >= 120) AND (0.3 * (午前+午後１+午後２+論述) <= 論述)

問題５−２
1. UPDATE 回答者
   SET 国名 CASE SUBSTRING(TRIM(メールアドレス),
                            LENGTH(TRIM(メールアドレス))-1,2)
            WHEN 'jp' THEN '日本'
            WHEN 'uk' THEN 'イギリス'
            WHEN 'cn' THEN '中国'
            WHEN 'fr' THEN 'フランス'
            WHEN 'vn' THEN 'ベトナム'
2. SELECT TRIM(メールアドレス) AS メールアドレス,
     CASE WHEN 年齢 >= 20 AND 年齢 < 30 THEN '20代'
          WHEN 年齢 >= 30 AND 年齢 < 40 THEN '30代'
          WHEN 年齢 >= 40 AND 年齢 < 50 THEN '40代'
          WHEN 年齢 >= 50 AND 年齢 < 60 THEN '50代'
     END
     || ':' ||
     CASE 性別 WHEN 'M' THEN '男'
     CASE 性別 WHEN 'F' THEN '女'
     END AS 属性
   FROM 回答者

問題５−３
1. UPDATE * 
   SET 文字数 = LENGTH (REPLACE(文字, ' ', ''))
2. SELECT 受注日,受注ID,文字数,
          CASE COALESCE(書体コード, '1')
             WHEN '1' THEN 'ブロック体'
             WHEN '2' THEN '筆記体'
             WHEN '3' THEN '草書体' END AS 書体名
          CASE COALESCE(書体コード, '1')
             WHEN '1' THEN '100'
             WHEN '2' THEN '150'
             WHEN '3' THEN '200' ,END AS 単価
          CASE 文字数 > 10 THEN 500
          ELSE 0 END AS 特別加工料
   FROM 受注
   ORDER BY 受注日,受注ID
3. UPDATE 受注
   SET 文字 = REPLACE(文字, ' ', '★')
   WHERE 受注ID = '113'

問題６−１
1. SELECT SUM (降水量), AVG(最高気温), AVG(最低気温)
   FROM 都市別気象観測
2. SELECT SUM(降水量), AVG(最高気温), AVG(最低気温)
   FROM 都市別気象観測
   WHERE 都市名 = '東京'
3. SELECT 都市名, AVG(降水量), MIN(最高気温),MAX(最低気温)
   FROM 都市別気象観測
   GROUP BY 都市名
4. SELECT 月, AVG(降水量), AVG(最高気温), AVG(最低気温)
   FROM 都市別気象観測
   GROUP BY 月
5. SELECT 都市名, MAX(最高気温)
   FROM 都市別気象観測
   GROUP BY 都市名
   HAVING MAX(最高気温) >= 38
6. SELECT 都市名, MIN(最低気温)
   FROM 都市別気象観測
   GROUP BY 都市名
   HAVING MIN(最低気温) <= -10

問題６−２
1. SELECT COUNT * AS 社員数
   FROM 入退室管理
   WHERE 退室 IS NULL
2. SELECT 社員名, COUNT(*) AS 入室回数
   FROM 入退室管理
   GROUP BY 社員名
   ORDER BY 2 DESC
3. SELECT CASE 事由区分 WHEN '1' THEN 'メンテナンス'
                       WHEN '2' THEN 'リリース作業'
                       WHEN '3' THEN '障害対応'
                       WHEN '9' THEN 'その他'
                       END AS 事由
   COUNT(*) AS 入室回数
   FROM 入退室管理
   GROUP BY 事由区分 
4. SELECT 社員名, COUNT(*) AS 入室回数
   FROM 入退室管理
   GROUP BY 社員名
   HAVING COUNT(*) > 10
5. SELECT 日付, COUNT(社員名) AS 対応社員数
   FROM 入退室管理
   WHERE 事由区分 
   GROUP BY 日付

問題６−３
２、５

問題7-1
1. A.単一行副問合せ
   B.SELECT
   C.SET
   D.n
   E.I
   F.複数行副問合せ
   G.ANY
   H.ALL
   I.FROM
   J.表
   K.SELECT


   
                      